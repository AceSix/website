@use 'sass:color';
@use 'sass:math';

@import 'base.scss';

* {
  -webkit-font-smoothing: subpixel-antialiased;

  box-sizing: border-box;

  margin: 0;
  padding: 0;

  font-family: inherit;
  font-size: inherit;
  font-weight: inherit;
  line-height: inherit;
  color: inherit;

  scroll-margin-top: $scroll-margin-top;
}

html {
  -webkit-text-size-adjust: none;
  text-size-adjust: none;

  background-color: $html-background-color;
}

body {
  height: 100vh;
  width: 100vw;
  // Attempt at fixing iOS Safari
  @supports (-webkit-touch-callout: none) {
    height: -webkit-fill-available;
  }

  background-position: center;
  background-size: $background-dot-spacing $background-dot-spacing;
  background-image: radial-gradient(
    circle,
    $background-dot-color $background-dot-size,
    rgba(0, 0, 0, 0) $background-dot-size
  );

  @include body-text;
}

#root {
  position: fixed;
  inset: 0;

  padding-top: $nav-bar-height;

  overflow-y: auto;
  scroll-behavior: smooth;
}

#nav-bar {
  position: fixed;
  z-index: 999;
  top: 0;
  left: 0;
  right: 0;

  height: $nav-bar-height;

  background-color: $nav-bar-background-color;
  border-bottom: 1px solid $nav-bar-border-color;

  box-shadow: $nav-bar-box-shadow;

  #nav-bar-inner {
    display: grid;
    place-content: stretch flex-end;
    grid-template: 'logo nav-items' minmax(0, 1fr) / min-content minmax(0, 1fr);
    gap: 20px;

    margin: 0 auto;
    padding: $nav-bar-padding;

    height: 100%;
    width: 100%;
    max-width: $page-max-width;
  }

  #nav-items {
    display: flex;
    flex-direction: row;
    align-items: stretch;

    justify-content: flex-end;

    @media only screen and (max-width: ($critical-b * 1px)) {
      > :first-child {
        display: none;
      }
    }
  }

  .nav-item {
    @include anchor-text($header-color, $nav-bar-hover-background-color);
    text-decoration: none !important;

    font-family: $nav-item-font-family;
    font-size: $nav-item-font-size;
    font-weight: $nav-item-font-weight;
    line-height: $nav-item-line-height;
    color: $nav-item-color;

    display: grid;
    place-items: center;

    padding: $nav-item-padding;

    white-space: nowrap;
  }
}

#logo {
  z-index: 1000;

  position: relative;
  top: $logo-top;
  left: $logo-left;

  height: $logo-height;
  width: $logo-width;

  box-shadow: $logo-box-shadow;

  display: grid;
  grid-template-columns: repeat(6, minmax(0, 1fr));

  font-family: $logo-font-family;
  font-size: $logo-font-size;
  font-weight: $logo-font-weight;
  line-height: $logo-line-height;
  color: $logo-color;

  @keyframes rollBefore {
    from {
      transform: translateY(-100%);
    }
    to {
      transform: translateY(0);
    }
  }

  @keyframes rollAfter {
    from {
      transform: translateY(0);
    }
    to {
      transform: translateY(100%);
    }
  }

  @mixin logo-char($background-color, $character) {
    position: relative;
    overflow: hidden;
    background-color: $background-color;

    &::before,
    &::after {
      content: $character;
      position: absolute;
      inset: 2px 0 0;
      text-align: center;
    }

    &.roll {
      &::before {
        animation: rollBefore ease-in-out var(--duration) both;
      }
      &::after {
        animation: rollAfter ease-in-out var(--duration) both;
      }
    }
  }

  > #a {
    @include logo-char(hsl(355, 60%, 57%), 'C');
  }
  > #b {
    @include logo-char(hsl(24, 73%, 58%), 'S');
  }
  > #c {
    @include logo-char(hsl(49, 73%, 58%), '1');
  }
  > #d {
    @include logo-char(hsl(95, 44%, 55%), '2');
  }
  > #e {
    @include logo-char(hsl(190, 47%, 46%), '3');
  }
  > #f {
    @include logo-char(hsl(255, 30%, 54%), '0');
  }
}

#page {
  margin: $page-margin;
  padding: $page-padding;

  min-height: 100%;
  max-width: $page-max-width;

  background-color: $page-background-color;
  border-left: 1px solid $page-border-color;
  border-right: 1px solid $page-border-color;

  display: grid;
  grid-template:
    'toc divider main' minmax(0, 1fr)
    / minmax(0, $toc-fr * 1fr) min-content minmax(0, $page-fr * 1fr);

  &::before {
    content: ' ';
    height: 100%;
    width: 0;
    display: grid;
    border-left: 1px solid $page-divider-color;
    grid-area: divider;
  }
}

.toc {
  position: sticky;
  top: 0;

  padding: $toc-padding;

  align-self: flex-start;

  ol {
    cursor: pointer;
    list-style: none;
  }

  $content-map: (
    1: '',
    2: counter(toc2) '.\00a0',
    3: counter(toc2) '.' counter(toc3) '.\00a0',
    4: counter(toc2) '.' counter(toc3) '.' counter(toc4) '.\00a0',
    5: counter(toc2) '.' counter(toc3) '.' counter(toc4) '.' counter(toc5) '.\00a0',
    6: counter(toc2) '.' counter(toc3) '.' counter(toc4) '.' counter(toc5) '.' counter(toc6) '.\00a0',
  );
  @mixin toc-level($level) {
    font-size: $toc-font-size;
    font-weight: $toc-font-weight;
    line-height: $toc-line-height;
    color: $toc-color;

    position: relative;

    @if ($level != 1) {
      left: ($level - 2) * 8px;
      border-left: 1px solid $toc-edge-color;
    }
  }
  @mixin toc-item($level) {
    @if ($level != 1) {
      position: relative;
      left: -($level - 2) * 8px;
      margin-left: -1px;
    }
  }
  @mixin toc-link($level) {
    @include anchor-text($toc-color, $toc-hover-background-color, $toc-hover-color);
    text-decoration: none !important;

    display: block;
    overflow: hidden;
    white-space: nowrap;
    text-overflow: ellipsis;

    margin-left: $toc-padding-left-negative;
    padding-left: $toc-padding-left;

    margin-right: -$toc-padding-right;
    padding-right: $toc-padding-right;

    counter-reset: toc#{$level + 1};

    &::before {
      counter-increment: toc#{$level};
      content: map-get($content-map, $level);
      display: inline-block;
      height: 100%;
      padding-left: ($level - 1) * 8px;
    }
  }
  @for $i from 1 through 6 {
    .toc-level-#{$i} {
      @include toc-level($i);
    }
    .toc-item-h#{$i} {
      @include toc-item($i);
    }
    .toc-link-h#{$i} {
      @include toc-link($i);
    }
  }
}

main {
  padding: $main-padding;

  background-color: $main-background-color;

  > * {
    margin-bottom: $main-inner-spacing-vert;
  }

  h1,
  h2,
  h3,
  h4,
  h5,
  h6 {
    margin-top: $main-inner-spacing-vert * 1.5;
    margin-bottom: $main-inner-spacing-vert;
  }

  h1 {
    margin-top: 0;
  }

  // Looks complicated, but it just creates the numbers in front of the headers
  $content-map: (
    1: '',
    2: counter(h2) '. ',
    3: counter(h2) '.' counter(h3) '. ',
    4: counter(h2) '.' counter(h3) '.' counter(h4) '. ',
    5: counter(h2) '.' counter(h3) '.' counter(h4) '.' counter(h5) '. ',
    6: counter(h2) '.' counter(h3) '.' counter(h4) '.' counter(h5) '.' counter(h6) '. ',
  );
  @for $i from 1 through 6 {
    h#{$i} {
      @include header-text($i);

      counter-reset: h#{$i + 1};
      position: relative;

      > a {
        @include anchor-text($header-color);

        position: relative;

        &::before {
          counter-increment: h#{$i};
          content: map-get($content-map, $i);
        }

        &:active {
          outline: none;
        }
      }
    }
  }

  p {
    @include body-text;
  }

  ol,
  ul {
    padding-left: $list-padding-left;
  }
  li {
    padding-left: $list-item-padding-left;
  }

  details {
    border-left: 1px solid $page-divider-color;
    padding-left: $list-padding-left * 0.5;

    > summary {
      margin-left: -($list-padding-left * 0.5 + 1px);
      background-color: $main-background-color;
    }
    > :not(:first-child) {
      margin-top: $main-inner-spacing-vert;
    }
  }
}

@media only screen and (max-width: ($middle-b * 1px)) {
  #page {
    border-left: none;
    border-right: none;
  }
}

// ================== Hide Table of Contents

@media only screen and (max-width: $breakpoint) {
  #page {
    grid-template: 'main' minmax(0, 1fr) / minmax(0, 1fr);

    &::before {
      content: unset;
    }
  }

  .toc {
    display: none;
  }

  main {
    padding-left: $main-padding-left;
  }
}

#page.hide-toc {
  .toc {
    visibility: hidden;
  }

  main {
    grid-area: main;
  }
}
